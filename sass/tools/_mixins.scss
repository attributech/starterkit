@mixin button() {
  display: inline-block;
  color: $white;
  background-color: $black;
  padding: 10px 35px;
  text-align: center;

  margin-top: 5px;
  border: none;
  cursor: pointer;

  @include from(l) {
    padding: 10px 50px;
    margin-top: 10px;
  }
}

@mixin print($declarations) {
  @each $property, $value in $declarations {
    #{$property}: $value
  }
}

@mixin font-style($name, $font-styles: $font-styles, $font-sizes: $font-sizes) {
  $font-style: map-get($font-styles, $name);
  @include print-font-style($font-style, $font-sizes);
}

@mixin font-size($name, $font-sizes: $font-sizes) {
  $font-size: map-get($font-sizes, $name);
  @include print-font-size($font-size, $font-sizes);
}

@mixin print-font-style($font-style, $font-sizes: $font-sizes) {
  @each $breakpoint, $style in $font-style {
    $font-size: map-get($font-sizes, $style);
    @include from($breakpoint) {
      @include print($font-size);
    }
  }
}

@mixin print-font-size($font-size, $font-sizes: $font-sizes) {
  @include from(xs) {
    @include print($font-size);
  }
}

// REM CALC
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  }
  // Turn 0rem into 0
  @return $value;
}

// STRIP UNIT
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin hide-text() {
  $approximate-em-value: 12px / 1em;
  $wider-than-any-screen: -9999em;
  text-indent: $wider-than-any-screen * $approximate-em-value;
  overflow: hidden;
  text-align: left;
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// icon fitters

@mixin icon-size($size: $icon-size-m) {
  > svg {
    width: $size;
    height: $size;
  }
}

@mixin icon-size-width($width: $icon-size-m) {
  width: $width;
  > svg {
    width: 100%;
    height: auto;
  }
}

@mixin icon-size-height($height: $icon-size-m) {
  height: $height;
  > svg {
    height: 100%;
    width: auto;
  }
}

@mixin max-width($max-width) {
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
}

@mixin multiline-ellipsis {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@function font-size-relative-margin($margin, $font-size-names: (), $font-cap-height: $font-cap-height, $font-sizes: $font-sizes) {
  @each $style in $font-size-names {
    $font-size: map-get($font-sizes, $style);
    $margin: $margin - get-font-size-relative-margin($font-size, $font-cap-height, $font-sizes);
  }
  @return $margin;
}

@function get-font-size-relative-margin($font-size, $font-cap-height: $font-cap-height, $font-sizes: $font-sizes) {
  $line-height-value: map-get($font-size, line-height);
  $font-size-value: map-get($font-size, font-size);
  $line-height-difference: ($line-height-value - $font-size-value) / 2;
  $size-difference: ($font-size-value - ($font-size-value * $font-cap-height)) / 2;
  $margin: $line-height-difference + $size-difference;
  @return $margin;
}

@mixin hover($color: $font-color-default, $hover-color: $font-color-highlight, $selector: '&:hover', $speed: $animation-duration-s) {
  color: $color;
  transition: color $speed $animation-timing-default;
  #{$selector} {
    color: $hover-color;
  }
}

@mixin grid($gutter: $gutter-m, $flex-wrap: wrap) {
  display: flex;
  flex-wrap: $flex-wrap;
  margin-left: -#{$gutter / 2};
  margin-right: -#{$gutter / 2};
}

@mixin grid-item($width, $gutter: $gutter-m) {
  @if ($width) {
    flex-basis: $width;
  }
  padding: 0 $gutter / 2;
  box-sizing: border-box;
}

@mixin underline() {
  position: relative;

  &:before {
    content: "";
    height: 1px;
    background-color: currentColor;
    position: absolute;
    bottom: 0;
    width: 100%;
  }
}

@mixin underline-remove {
  &:before {
    content: normal;
    display: none;
  }
}
